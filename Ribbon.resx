<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="btnPlay.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAZdEVYdFNvZnR3YXJlAEFkb2JlIEltYWdlUmVhZHlxyWU8AAADIGlUWHRYTUw6Y29tLmFkb2Jl
        LnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQi
        Pz4gPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iQWRvYmUgWE1QIENv
        cmUgNS4wLWMwNjAgNjEuMTM0Nzc3LCAyMDEwLzAyLzEyLTE3OjMyOjAwICAgICAgICAiPiA8cmRmOlJE
        RiB4bWxuczpyZGY9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvMDIvMjItcmRmLXN5bnRheC1ucyMiPiA8
        cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIiB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20v
        eGFwLzEuMC8iIHhtbG5zOnhtcE1NPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvbW0vIiB4bWxu
        czpzdFJlZj0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlUmVmIyIgeG1w
        OkNyZWF0b3JUb29sPSJBZG9iZSBQaG90b3Nob3AgQ1M1IFdpbmRvd3MiIHhtcE1NOkluc3RhbmNlSUQ9
        InhtcC5paWQ6OEY3RjREQTBBNDAwMTFFMUIwNTdFODFFMjkxQ0I1MDUiIHhtcE1NOkRvY3VtZW50SUQ9
        InhtcC5kaWQ6OEY3RjREQTFBNDAwMTFFMUIwNTdFODFFMjkxQ0I1MDUiPiA8eG1wTU06RGVyaXZlZEZy
        b20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo4RjdGNEQ5RUE0MDAxMUUxQjA1N0U4MUUyOTFDQjUw
        NSIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo4RjdGNEQ5RkE0MDAxMUUxQjA1N0U4MUUyOTFDQjUw
        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
</value>
  </data>
</root>